#!/usr/bin/env python

"""TRAPL_FUN - A RNA-seq Functional Analysis PipeLine"""

import argparse
from traplfunlib.controller import Controller

__author__ = "Lei Li <leili.bioinfo@gmail.com>"
__copyright__ = "2014 by Lei Li"
__version__ = "0.4.2"

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--version", "-v", default=False, action="store_true",
        help="show version")
    subparsers = parser.add_subparsers(help="commands")

    # Arguments for project creation
    create_project_parser = subparsers.add_parser(
        "create", help="Create a project")
    create_project_parser.add_argument(
        "project_path", default=".", help="Name/path of the project.")
    create_project_parser.set_defaults(func=create_project)

    # Parameters for blast2go
    blast2go_parser = subparsers.add_parser(
        "blast2go", help = "Run blast2go")
    blast2go_parser.add_argument(
        "project_path", default=".",nargs="?",
        help="Path of the project folder. If none is given the current "
        "directory is used.")
    blast2go_parser.set_defaults(func=blast2go)

    # Parameters for go retrieve
    go_retrieving_parser = subparsers.add_parser(
        "retrieve", help = "Run go term retrieve")
    go_retrieving_parser.add_argument(
        "project_path", default=".", nargs="?",
        help="Path of the project folder. If none is given the current "
        "directory is used.")
    go_retrieving_parser.set_defaults(func=go_terms)

    # Parameters for pathway retrieval
    kegg_retrieving_parser = subparsers.add_parser(
        "retrieve_pa", help= "Run pathway retrieve")
    kegg_retrieving_parser.add_argument(
        "project_path",default=".",nargs="?",
        help="Path of the project folder. If none is given the current "
        "directory is used.")
    kegg_retrieving_parser.add_argument(
        "--code", "-c", required=True,
        help="KEGG organism code")
    kegg_retrieving_parser.set_defaults(func=kegg_terms)

    # Parameters for go enrichment analysis
    go_enrich_parser = subparsers.add_parser(
        "go_stat", help = "Run go terms statistics")
    go_enrich_parser.add_argument(
        "project_path", default=".", nargs="?",
        help="Path of the project folder. If none is given the current"
        "directory is used.")
    go_enrich_parser.add_argument(
        "--fdr", "-f" , help = "false discovery rate option")
    go_enrich_parser.add_argument(
        "--gsea","-g", default="False",
        help="gene set enrichment analysis option")
    go_enrich_parser.set_defaults(func=go_stat)

    # Parameters for pathway enrichment analysis
    kegg_enrich_parser = subparsers.add_parser(
        "pathway_stat", help= "Run pathway statistics")
    kegg_enrich_parser.add_argument(
        "project_path",default=".",nargs="?",
        help="Path of the project folder. If none is given, the current"
        "directory is used")
    kegg_enrich_parser.add_argument(
        "--gsea","-g", default="False",
        help="gene set enrichment analysis option")
    kegg_enrich_parser.add_argument(
        "--fdr","-f",
        help="False discovery rate option")
    kegg_enrich_parser.set_defaults(func=pathway_stat)

    # Parameters for go visulization
    go_viz_parser = subparsers.add_parser(
        "go_viz", help = "Run go viz")
    go_viz_parser.add_argument(
        "project_path", default=".",nargs="?",
        help="Path of the project folder. If none is given, the current"
        "directory is used")
    go_viz_parser.set_defaults(func=go_viz)

    # Parameters for clustering
    clustering_parser = subparsers.add_parser(
        "clustering", help = "Run clustering analysis")
    clustering_parser.add_argument(
        "project_path", default=".", nargs="?",
        help="Path of the project folder. If none is given, the current"
        "directory is used")
    clustering_parser.add_argument(
        "--rowmethod","-rd",default="average",type=str,
        help="row clustering methods")
    clustering_parser.add_argument(
        "--rowmatrix","-rx",default="euclidean",type=str,
        help="row clustering matrix")
    clustering_parser.add_argument(
        "--colmethod","-cd",default="average",type=str,
        help="column clustering methods")
    clustering_parser.add_argument(
        "--colmatrix","-cx",default="euclidean",type=str,
        help="column clustering matrix")
    clustering_parser.add_argument(
        "--color","-co",default="red_white_blue",type=str,
        help="clustering color")
    clustering_parser.set_defaults(func=clustering)

    # Parameters for gsea analysis
    gsea_parser = subparsers.add_parser(
        "gsea", help = "Run GSEA analysis")
    gsea_parser.add_argument(
        "project_path", default=".", nargs="?",
        help="Path of the project folder. If none is given, the current"
        "directory is used")
    gsea_parser.add_argument(
        "--pcol", "-p", default="2", type=int,
        help="The pvalue column")
    gsea_parser.add_argument(
        "--fcol","-c",default="3", type=int,
        help="The log fold change column")
    gsea_parser.add_argument(
        "--method","-m", default="median", type=str,
        help="methods for gene set analysis")
    gsea_parser.add_argument(
        "--minsize","-s", default="5", type=int,
        help="Minimum size of a cluster")
    gsea_parser.add_argument(
        "--minedge","-e", default="3", type=int,
        help="Minimum number of shared genes between two gene sets")
    gsea_parser.set_defaults(func=gsea)

    args = parser.parse_args()
    if args.version is True:
        print("TRAPL_FUN_version " + __version__)
    elif "func" in dir(args):
        controller = Controller(args)
        args.func(controller)
    else:
        parser.print_help()

def create_project(controller):
    controller.create_project(__version__)

def blast2go(controller):
    controller.blast2go()

def go_terms(controller):
    controller.go_terms()

def kegg_terms(controller):
    controller.kegg_terms()

def go_stat(controller):
    controller.go_stat()

def pathway_stat(controller):
    controller.pathway_stat()

def go_viz(controller):
    controller.go_viz()

def clustering(controller):
   controller.clustering()

def gsea(controller):
    controller.gsea()

main()
